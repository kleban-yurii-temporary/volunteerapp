@page "/config"

@using System.Globalization
@using VolunteerRequestApp.Client.Infrastructure;
@using VolunteerRequestApp.Shared.Dtos.Currency

@inject HttpCurrencyPairService pairRepository

<h3>Конфігурація</h3>

<br />
<h5>Currency API</h5>
<hr />

<div class="row">
    <div class="col-md-4">
        @if (apiConfig != null)
        {
            <h5><strong>Settings</strong></h5>
            <label>Url:</label>
            <input @bind-value="apiConfig.ApiUrl" class="form-control" readonly />
            <label>Key:</label>
            <input @bind-value="apiConfig.ApiKey" class="form-control" readonly />

            <div class="row">
                <div class="col-md-6">
                    <label>Базова валюта:</label>
                    <input @bind-value="apiConfig.BaseCurrency" class="form-control" readonly />
                </div>
                <div class="col-md-6">
                    <label>Додаткова валюта:</label>
                    <input @bind-value="apiConfig.SecondaryCurrency" class="form-control" readonly />
                </div>
            </div>
        }
        else
        {
            <SpinnerComponent></SpinnerComponent>
        }
    </div>

    <div class="col-md-4">
        @if (currencies != null)
        {
            <h5><strong>Actual Info</strong></h5>
            <label>Оберіть пару</label>
            <select class="form-control" @onchange="SelectedCurrenciesChanged">
                @foreach (var cp in currencies)
                {
                    <option selected="@(SelectedPair.Id == cp.Id)" value="@cp.Id">@cp.From / @cp.To</option>
                }
            </select>
            <hr />
            <button type="button" class="btn btn-sm btn-warning float-end" @onclick="ChangeActivityState">Змінити</button>
            <label>Статус: <strong class="badge @(SelectedPair.IsActive? "bg-success" : "bg-danger")">@(SelectedPair.IsActive ? "Активний" : "Неактивний")</strong></label>

            <hr />
            @if (history != null)
            {
                <table class="table table-bordered table-sm">
                    <tr>
                        <th>Дата</th>
                        <th>Курс</th>
                    </tr>
                    @foreach (var h in history.Records)
                    {
                        <tr>
                            <td>@h.CreatedOn.Value.ToString("dd.MM.yyyy HH:mm", new CultureInfo("en"))</td>
                            <td>@h.Value</td>
                        </tr>
                    }
                </table>
            }
        }
        else
        {
            <SpinnerComponent></SpinnerComponent>
        }
    </div>

    <div class="col-md-4">

        @if (apiCurrenciesList != null)
        {
            <h5><strong>Оновлення курсу</strong></h5>
            <label>Оберіть валюту</label>

            <div class="input-group">
                <select class="form-control" @onchange="SelectedApiCurrencyChanged">
                    @foreach (var c in apiCurrenciesList)
                    {
                        <option value="@c.Key">@c.Key (@c.Value)</option>
                    }
                </select>
                <div class="input-group-append">
                    <button @onclick="GetCurrencyRate" class="btn btn-primary">Отримати курс</button>
                </div>
            </div>

            <hr />

            <div style="display: @rateVisibilityState">
                <label>Курс <strong>@CurrencyRatePair.From/@CurrencyRatePair.To</strong></label>
                <div class="input-group">
                    <input type="number" @bind-value="CurrencyRatePair.CurrentValue" class="form-control" />
                    <div class="input-group-append">
                        <button type="button" @onclick="SaveCurrencyRate" class="btn btn-primary">Зберегти</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <SpinnerComponent></SpinnerComponent>
        }
    </div>
</div>

@code {

    private CurrencyApiConfig apiConfig;

    private IEnumerable<CurrencyPairReadDto> currencies;
    private CurrencyPairHistroryReadDto history;
    private CurrencyPairReadDto SelectedPair = null;
    private CurrencyPairReadDto CurrencyRatePair = new CurrencyPairReadDto();
    private Dictionary<string, string> apiCurrenciesList;
    private string selectedApiCurrency = "";

    private string rateVisibilityState = "none";


    protected override async Task OnInitializedAsync()
    {
        apiConfig = await pairRepository.GetApiConfigAsync();
        currencies = await pairRepository.GetCurrencyPairsListAsync();
        SelectedPair = currencies.First();
        await GetHistory();

        apiCurrenciesList = await pairRepository.GetCurrenciesListAsync();
        selectedApiCurrency = apiCurrenciesList.First().Key;
    }

    async Task GetHistory()
    {
        history = await pairRepository.GetHistoryAsync(SelectedPair.From, SelectedPair.To);
    }

    async Task SelectedCurrenciesChanged(ChangeEventArgs e)
    {
        Console.WriteLine($"Value: {e.Value}");
        var idStr = (string)e.Value;
        SelectedPair = currencies.First(x => x.Id == int.Parse(idStr));
        await GetHistory();
    }

    async Task SelectedApiCurrencyChanged(ChangeEventArgs e)
    {
        selectedApiCurrency = (string)e.Value;
    }

    async void GetCurrencyRate()
    {
        CurrencyRatePair = await pairRepository.GetCurrencyRateAsync(selectedApiCurrency);
        rateVisibilityState = "block";
        StateHasChanged();
    }

    async void SaveCurrencyRate()
    {
        SelectedPair = await pairRepository.SaveCurrencyPairDataAsync(new CurrencyPairCreateUpdateDto 
            {
                From = CurrencyRatePair.From,
                To = CurrencyRatePair.To,
                CurrentValue = CurrencyRatePair.CurrentValue
            });

        if(!currencies.Any(x=> x.Id == SelectedPair.Id))
            currencies = await pairRepository.GetCurrencyPairsListAsync();            

        await GetHistory();
        StateHasChanged();
    }

    async Task ChangeActivityState()
    {
        SelectedPair.IsActive = await pairRepository.ChangeCurrencyPairStatusAsync(SelectedPair.Id);

    }
}
